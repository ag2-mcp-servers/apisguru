# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:50:54+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from pydantic import constr

from models import API, APIs, Metrics
from models.field_provider_Services import JsonGetResponse
from models.Providers import JsonGetResponse

app = MCPProxy(
    contact={
        'email': 'mike.ralphson@gmail.com',
        'name': 'APIs.guru',
        'url': 'https://APIs.guru',
    },
    description='Wikipedia for Web APIs. Repository of API definitions in OpenAPI format.\n**Warning**: If you want to be notified about changes in advance please join our [Slack channel](https://join.slack.com/t/mermade/shared_invite/zt-g78g7xir-MLE_CTCcXCdfJfG3CJe9qA).\nClient sample: [[Demo]](https://apis.guru/simple-ui) [[Repo]](https://github.com/APIs-guru/simple-ui)\n',
    license={
        'name': 'CC0 1.0',
        'url': 'https://github.com/APIs-guru/openapi-directory#licenses',
    },
    title='APIs.guru',
    version='2.2.0',
    servers=[{'url': 'https://api.apis.guru/v2'}],
)


@app.get(
    '/list.json',
    description=""" List all APIs in the directory.
Returns links to the OpenAPI definitions for each API in the directory.
If API exist in multiple versions `preferred` one is explicitly marked.
Some basic info from the OpenAPI definition is cached inside each object.
This allows you to generate some simple views without needing to fetch the OpenAPI definition for each API.
 """,
    tags=['api_management'],
)
def list_a_p_is():
    """
    List all APIs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/metrics.json',
    description=""" Some basic metrics for the entire directory.
Just stunning numbers to put on a front page and are intended purely for WoW effect :)
 """,
    tags=['metrics_retrieval'],
)
def get_metrics():
    """
    Get basic metrics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers.json',
    description=""" List all the providers in the directory
 """,
    tags=['provider_information'],
)
def get_providers():
    """
    List all providers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/specs/{provider}/{api}.json',
    description=""" Returns the API entry for one specific version of an API where there is no serviceName. """,
    tags=['api_management', 'provider_information'],
)
def get_a_p_i(
    provider: constr(min_length=1, max_length=255),
    api: constr(min_length=1, max_length=255) = ...,
):
    """
    Retrieve one version of a particular API
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/specs/{provider}/{service}/{api}.json',
    description=""" Returns the API entry for one specific version of an API where there is a serviceName. """,
    tags=['api_management', 'provider_information'],
)
def get_service_a_p_i(
    provider: constr(min_length=1, max_length=255),
    service: constr(min_length=1, max_length=255) = ...,
    api: constr(min_length=1, max_length=255) = ...,
):
    """
    Retrieve one version of a particular API with a serviceName.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{provider}.json',
    description=""" List all APIs in the directory for a particular providerName
Returns links to the individual API entry for each API.
 """,
    tags=['api_management', 'provider_information'],
)
def get_provider(provider: constr(min_length=1, max_length=255)):
    """
    List all APIs for a particular provider
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{provider}/services.json',
    description=""" List all serviceNames in the directory for a particular providerName
 """,
    tags=['provider_information'],
)
def get_services(provider: constr(min_length=1, max_length=255)):
    """
    List all serviceNames for a particular provider
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
