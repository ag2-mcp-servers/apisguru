# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:50:54+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class ApiVersion(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    added: datetime = Field(..., description='Timestamp when the version was added')
    externalDocs: Optional[Dict[str, Any]] = Field(
        None, description='Copy of `externalDocs` section from OpenAPI definition'
    )
    info: Dict[str, Any] = Field(
        ..., description='Copy of `info` section from OpenAPI definition'
    )
    link: Optional[str] = Field(
        None, description='Link to the individual API entry for this API'
    )
    openapiVer: str = Field(
        ...,
        description='The value of the `openapi` or `swagger` property of the source definition',
    )
    swaggerUrl: str = Field(..., description='URL to OpenAPI definition in JSON format')
    swaggerYamlUrl: str = Field(
        ..., description='URL to OpenAPI definition in YAML format'
    )
    updated: datetime = Field(..., description='Timestamp when the version was updated')


class ThisWeek(BaseModel):
    added: Optional[int] = Field(None, description='APIs added in the last week')
    updated: Optional[int] = Field(None, description='APIs updated in the last week')


class Metrics(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    datasets: Optional[List] = Field(None, description='Data used for charting etc')
    fixedPct: Optional[int] = Field(
        None, description='Percentage of all APIs where auto fixes have been applied'
    )
    fixes: Optional[int] = Field(
        None, description='Total number of fixes applied across all APIs'
    )
    invalid: Optional[int] = Field(None, description='Number of newly invalid APIs')
    issues: Optional[int] = Field(
        None, description='Open GitHub issues on our main repo'
    )
    numAPIs: conint(ge=1) = Field(..., description='Number of unique APIs')
    numDrivers: Optional[int] = Field(
        None, description='Number of methods of API retrieval'
    )
    numEndpoints: conint(ge=1) = Field(
        ..., description='Total number of endpoints inside all definitions'
    )
    numProviders: Optional[int] = Field(
        None, description='Number of API providers in directory'
    )
    numSpecs: conint(ge=1) = Field(
        ...,
        description='Number of API definitions including different versions of the same API',
    )
    stars: Optional[int] = Field(None, description='GitHub stars for our main repo')
    thisWeek: Optional[ThisWeek] = Field(
        None, description='Summary totals for the last 7 days'
    )
    unofficial: Optional[int] = Field(None, description='Number of unofficial APIs')
    unreachable: Optional[int] = Field(
        None, description='Number of unreachable (4XX,5XX status) APIs'
    )


class API(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    added: datetime = Field(
        ..., description='Timestamp when the API was first added to the directory'
    )
    preferred: str = Field(..., description='Recommended version')
    versions: Dict[str, ApiVersion] = Field(
        ..., description='List of supported versions of the API'
    )


class APIs(RootModel[Optional[Dict[str, API]]]):
    root: Optional[Dict[str, API]] = None
